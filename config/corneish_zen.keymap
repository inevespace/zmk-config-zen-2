/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/
//#include <dt-bindings/zmk/keys.h>

#include "keys_ru_phonetic.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ______  &trans

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tocmk {
            bindings = <&tog 1>;
            key-positions = <24 35>;
        };

        toplover {
            bindings = <&tog 2>;
            key-positions = <25 34>;
        };

        rsft-combo {
            bindings = <&kp UP>;
            key-positions = <20 8>;
            layers = <1 0>;
        };

        auxfunc {
            bindings = <&sl 5>;
            key-positions = <36 37 38>;
        };

        lctrl-combo {
            bindings = <&kp M>;
            key-positions = <16 4>;
            layers = <0 1>;
        };

        lwin-combo {
            bindings = <&kp B>;
            key-positions = <14 2>;
            layers = <0 1>;
        };

        lsft-combo {
            bindings = <&kp V>;
            key-positions = <15 3>;
            layers = <1 0>;
        };

        rctrl {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <7 19>;
            layers = <1 0>;
        };

        lalt-combo {
            bindings = <&kp M>;
            key-positions = <13 25>;
            layers = <1>;
        };

        ralt-combo {
            bindings = <&kp X>;
            key-positions = <22 34>;
            layers = <1 0>;
        };

        left {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <8 7>;
            layers = <1 0>;
        };

        right {
            bindings = <&kp RIGHT>;
            key-positions = <8 9>;
            layers = <1 0>;
        };

        pgup {
            bindings = <&kp PG_UP>;
            key-positions = <8 19>;
            layers = <1 0>;
        };

        pgdn {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <8 21>;
            layers = <1 0>;
        };

        copypaste {
            bindings = <&tph K_PASTE K_COPY>;
            key-positions = <5 17>;
            layers = <1 0>;
        };

        p1 {
            bindings = <&kp LG(N1)>;
            key-positions = <1 2>;
        };

        p2 {
            bindings = <&kp LG(NUMBER_2)>;
            key-positions = <2 3>;
        };

        p3 {
            bindings = <&kp LG(NUMBER_3)>;
            key-positions = <3 4>;
        };

        p4 {
            bindings = <&kp LG(NUMBER_4)>;
            key-positions = <4 5>;
        };

        rwin-combo {
            bindings = <&kp J>;
            key-positions = <9 21>;
            layers = <1 0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <19 20 21>;
            layers = <1 0>;
            require-prior-idle-ms = <150>;
        };

        m-combo {
            bindings = <&kp M>;
            key-positions = <13 1>;
            layers = <1>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <16 15 14>;
            require-prior-idle-ms = <150>;
            layers = <1 0>;
        };
    };

    behaviors {
        tph: tap_preferr_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TPH";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <125>;
        };

        lk_qu: lk_qu {
            compatible = "zmk,behavior-hold-tap";
            label = "LK_QU";
            bindings = <&qu_macro>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <150>;
        };

        lk_ck: lk_ck {
            compatible = "zmk,behavior-hold-tap";
            label = "LK_CK";
            bindings = <&ck_macro>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <150>;
        };

        lk_ing: lk_ing {
            compatible = "zmk,behavior-hold-tap";
            label = "LK_ING";
            bindings = <&ing_macro>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <150>;
        };
    };

    macros {
        qu_macro: qu_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU_MACRO";
        };

        ing_macro: ing_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp G &kp SPACE>;
            label = "ING_MACRO";
        };

        ck_macro: ck_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp K>;
            label = "CK_MACRO";
        };
    };

    /*  Base (alpha) Layer  Hands Down Vibranium-Vb
    Building for a 36/42 key board
     ╭─────────────────────╮ ╭──────────────────────╮
ESC  │  X   W   M   G   J  │ │  #$  .:  /*  "«  '»  │ BSP
TAB  │  S   C   N   T   K  | |  ,;   A   E   I   H  │ Tg(Num)
LSFT │  B   P   L   D   V  │ │  -+   U   O   Y   F  │ RSFT
     ╰──────╮  App BSP  R  │ │  SPC RET TAB  ╭──────╯
            ╰──────────────╯ ╰───────────────╯

                l_alpha {
                        label = "HD-Vb";
                        bindings = <

&kp ESC  &ak_x  &ak_w   &ak_m   &ak_g   &ak_j           &HashDllr   &DotColn    &SlshStar   &DqtLbkt    &SqtRbkt  &kp BSPC
&kp TAB &hml LCTRL S &hrm_c LALT C   &hml LGUI N  &hrm_t LSHFT T &ak_k    &CmmaSemi   &hrm_a RSHFT A &hrm_e RGUI E  &hrm_i RALT I  &hmr RCTRL H &kp SEMI
&kp LSHFT &ak_b &ak_p   &kp L   &ak_d   &ak_v       &MinusPlus  &ak_u       &ak_o       &ak_y   &kp F &kp RSHFT

                        &AppSwitch &mm_bspc_del &lt l_nav R      &lt l_sym SPACE &lt l_nav RETURN  &tog l_num
                        >;
                };

                   l_akG {
                            label = "l_akG";
                            bindings = <
______  &kp T   &kp D   &kp L   ______  ______      ______  ______  ______  ______  ______  ______
______  ______  ______  ______  ______  &ak_lk      ______  ______  ______  ______  ______  ______
______  ______  ______  ______  ______  ______      ______  ______  ______  ______  ______  ______
                        ______  ______  ______      ______  ______  ______
                            >;
                   };
*/

    keymap {
        compatible = "zmk,keymap";

        test {
            display-name = "test";
            bindings = <
&lt 7 ESCAPE     &tph N1 M        &tph NUMBER_3 P  &tph N1 G          &tph NUMBER_5 K  &tph N7 LBKT    &tph N0 RIGHT_BRACKET  &tph N6 SEMI  &tph NUMBER_2 U     &tph NUMBER_4 Y  &tph N8 X         &kp DEL
&lt 4 BACKSPACE  &tph LEFT_ALT L  &tph LEFT_WIN N  &tph LEFT_SHIFT S  &tph LCTRL T     &kp K           &tph PLUS MINUS        &tph RCTRL O  &tph RIGHT_SHIFT E  &tph LEFT_WIN I  &tph RIGHT_ALT H  &kp SQT
&lt 7 LANG2      &kp W            &kp Z            &lk_ck 0 C         &kp D            &kp Q           &tph EQUAL BACKSLASH   &kp A         &tph LT COMMA       &tph GT DOT      &tph SLASH F      &kp LANG1
                                                   &lt 6 LG(X)        &tph TAB R       &lt 3 SPACE     &lt 3 SPACE            &mo 4         &key_repeat
            >;
        };

        lnst {
            display-name = "lnst";
            bindings = <
&lt 7 ESCAPE     &tph N1 M        &tph NUMBER_3 P  &tph N1 G          &tph NUMBER_5 D  &tph N7 LBKT    &tph N0 RIGHT_BRACKET  &tph N6 SEMI  &tph NUMBER_2 U     &tph NUMBER_4 Y  &tph N8 X         &kp DEL
&lt 4 BACKSPACE  &tph LEFT_ALT L  &tph LEFT_WIN N  &tph LEFT_SHIFT S  &tph LCTRL T     &kp K           &tph PLUS MINUS        &tph RCTRL O  &tph RIGHT_SHIFT E  &tph LEFT_WIN I  &tph RIGHT_ALT H  &kp SQT
&lt 7 LANG2      &kp W            &kp Z            &kp C              &kp K            &kp Q           &tph EQUAL BACKSLASH   &kp A         &tph LT COMMA       &tph GT DOT      &tph SLASH F      &kp LANG1
                                                   &lt 6 LG(X)        &tph TAB R       &lt 3 SPACE     &lt 3 SPACE            &mo 4         &key_repeat
            >;
        };

        plover {
            display-name = "plover";
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E      &kp R  &kp T    &kp Y  &kp U  &kp I      &kp O    &kp P     &kp LBKT
&kp BSPC    &kp A  &kp S  &kp D      &kp F  &kp G    &kp H  &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL   &none  &none  &none      &none  &none    &none  &none  &kp COMMA  &kp DOT  &kp FSLH  &kp RCTRL
                          &kp SPACE  &kp C  &kp V    &kp N  &kp M  &kp SPACE
            >;
        };

        sym {
            display-name = "SYMBOL";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(NUMBER_5)    &kp TILDE  &kp LPAR          &kp RPAR           &kp A       &kp BACKSLASH  &kp BACKSLASH
&kp F1     &kp F2            &kp F3            &kp F4            &kp F5            &kp F6              &kp CARET  &kp COMMA         &kp SEMICOLON      &kp DOLLAR  &kp COLON      &trans
&kp F7     &kp F8            &kp F9            &kp F10           &kp F11           &kp F12             &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp A       &kp FSLH       &kp TILDE
                                               &trans            &trans            &kp SPACE           &kp SPACE  &trans            &none
            >;
        };

        nav {
            bindings = <
&none  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kt LG(N5)    &none  &kp LC(LEFT)    &kp UP_ARROW    &kp LC(RIGHT)  &kp PG_UP  &none
&none  &sk LEFT_ALT      &sk LEFT_META     &sk LEFT_SHIFT    &sk LCTRL         &none         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT      &kp PG_DN  &none
&none  &none             &none             &none             &none             &none         &none  &kp HOME        &none           &kp END        &none      &none
                                           &none             &none             &none         &none  &none           &none
            >;

            label = "nav";
        };

        aux {
            bindings = <
&bt BT_NXT  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &none  &none    &none  &none  &none            &none            &none            &rgb_ug RGB_TOG
&bt BT_CLR  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none  &none    &none  &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF
&sys_reset  &bootloader    &soft_off      &out OUT_TOG   &none  &none    &none  &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFR
                                          &none          &none  &none    &none  &none  &none
            >;
        };

        os {
            bindings = <
&none  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)    &none  &none               &kp LG(UP)    &none          &none  &none
&none  &none             &none             &kp LSHFT         &none             &none         &none  &kp LG(LEFT_ARROW)  &kp LG(DOWN)  &kp LG(RIGHT)  &none  &none
&none  &none             &none             &none             &none             &none         &none  &none               &none         &none          &none  &none
                                           &none             &none             &none         &none  &none               &none
            >;
        };

        rnumpad {
            bindings = <
&none  &none  &none  &none  &none  &none    &kp KP_NUMLOCK   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp ASTERISK     &none
&none  &none  &none  &none  &none  &none    &tph MINUS PLUS  &kp KP_N4        &kp KP_NUMBER_5  &kp KP_NUMBER_6  &tph FSLH ASTRK  &trans
&none  &none  &none  &none  &none  &none    &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT       &none
                     &none  &none  &none    &none            &kp KP_NUMBER_0  &kp DOT
            >;
        };
    };
};
